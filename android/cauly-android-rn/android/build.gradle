buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["CaulyAndroidRn_kotlinVersion"]

  repositories {
    google()
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:7.1.2'
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"


def appProject = rootProject.allprojects.find { it.plugins.hasPlugin('com.android.application') }

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["CaulyAndroidRn_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["CaulyAndroidRn_" + name]).toInteger()
}

android {
  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
  }
  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  if (supportsNamespace()) {
    namespace "com.caulyandroidrn"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  if (major == 7 && minor >= 3) {
    return true
  }

  return major >= 8
}


rootProject.allprojects {
  repositories {
    jcenter()
    google()

    // Cauly SDK Repository
    maven {
      url "s3://repo.cauly.net/releases"
      credentials(AwsCredentials) {
        accessKey "AKIAWRZUK5MFKYVSUOLB"
        secretKey "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"
      }
    }

    def found = false
    def defaultDir = null
    def androidSourcesName = 'React Native sources'

    if (rootProject.ext.has('reactNativeAndroidRoot')) {
      defaultDir = rootProject.ext.get('reactNativeAndroidRoot')
    } else {
      defaultDir = new File(
        projectDir,
        '/../../../node_modules/react-native/android'
      )
    }

    if (defaultDir.exists()) {
      maven {
        url defaultDir.toString()
        name androidSourcesName
      }

      logger.info(":${project.name}:reactNativeAndroidRoot ${defaultDir.canonicalPath}")
      found = true
    } else {
      def parentDir = rootProject.projectDir

      1.upto(5, {
        if (found) return true
        parentDir = parentDir.parentFile

        def androidSourcesDir = new File(
          parentDir,
          'node_modules/react-native'
        )

        def androidPrebuiltBinaryDir = new File(
          parentDir,
          'node_modules/react-native/android'
        )

        if (androidPrebuiltBinaryDir.exists()) {
          maven {
            url androidPrebuiltBinaryDir.toString()
            name androidSourcesName
          }

          logger.info(":${project.name}:reactNativeAndroidRoot ${androidPrebuiltBinaryDir.canonicalPath}")
          found = true
        } else if (androidSourcesDir.exists()) {
          maven {
            url androidSourcesDir.toString()
            name androidSourcesName
          }

          logger.info(":${project.name}:reactNativeAndroidRoot ${androidSourcesDir.canonicalPath}")
          found = true
        }
      })
    }

    if (!found) {
      throw new GradleException(
        "${project.name}: unable to locate React Native android sources. " +
          "Ensure you have you installed React Native as a dependency in your project and try again."
      )
    }
  }
}

def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  // 카울리 & 구글 dependencies
  implementation 'com.google.android.gms:play-services-ads-identifier:17.0.0'
  implementation 'com.google.android.gms:play-services-appset:16.0.0'
  implementation 'com.fsn.cauly:cauly-sdk:3.5.25'
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "CaulyAndroidRn"
    codegenJavaPackageName = "com.caulyandroidrn"
  }
}
